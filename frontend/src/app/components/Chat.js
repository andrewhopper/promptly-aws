"use strict";
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const react_chat_elements_1 = require("react-chat-elements");
require("react-chat-elements/dist/main.css");
const aws_amplify_1 = require("aws-amplify");
const VoiceChat_1 = require("./VoiceChat");
// Configure Amplify
aws_amplify_1.Amplify.configure({
    API: {
        REST: {
            'BedrockAgent': {
                endpoint: process.env.NEXT_PUBLIC_API_ENDPOINT || '',
                region: process.env.NEXT_PUBLIC_AWS_REGION || 'us-east-1'
            }
        }
    }
});
const Chat = () => {
    const [messages, setMessages] = (0, react_1.useState)([]);
    const [inputText, setInputText] = (0, react_1.useState)('');
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)(null);
    const messageListRef = (0, react_1.useRef)(null);
    const [speakText, setSpeakText] = (0, react_1.useState)(null);
    const scrollToBottom = () => {
        const chatContainer = document.querySelector('.message-list');
        if (chatContainer) {
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }
    };
    (0, react_1.useEffect)(() => {
        scrollToBottom();
    }, [messages]);
    const addMessage = (message) => {
        setMessages(prev => [...prev, message]);
    };
    const createMessage = (text, position, status) => {
        return {
            position,
            type: 'text',
            title: position === 'left' ? 'Bedrock Agent' : 'You',
            text,
            date: new Date(),
            id: Date.now().toString(),
            status,
            focus: false,
            forwarded: false,
            replyButton: false,
            removeButton: false,
            notch: true,
            retracted: false,
            titleColor: position === 'left' ? '#4080ff' : '#40a9ff'
        };
    };
    const sendMessage = async (message) => {
        if (!message.trim() || isLoading)
            return;
        setIsLoading(true);
        setError(null);
        // Add user message
        const userMessage = createMessage(message, 'right', 'sent');
        addMessage(userMessage);
        setInputText('');
        // Add typing indicator
        const typingMessage = createMessage('Agent is typing...', 'left', 'waiting');
        addMessage(typingMessage);
        try {
            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message }),
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            // Remove typing indicator
            setMessages(prev => prev.filter(msg => msg.status !== 'waiting'));
            // Add agent response
            const agentMessage = createMessage(data.response, 'left', 'received');
            addMessage(agentMessage);
            // Speak the response if speech synthesis is available
            if (speakText) {
                await speakText(data.response);
            }
        }
        catch (error) {
            console.error('Error sending message:', error);
            setError('Failed to send message. Please try again.');
            // Remove typing indicator
            setMessages(prev => prev.filter(msg => msg.status !== 'waiting'));
            // Add error message
            const errorMessage = createMessage('Sorry, there was an error processing your message.', 'left', 'received');
            addMessage(errorMessage);
        }
        finally {
            setIsLoading(false);
        }
    };
    return (<div className="flex flex-col h-full bg-gray-100 dark:bg-gray-900">
      <div className="p-4 bg-white dark:bg-gray-800 shadow-sm">
        <h1 className="text-2xl font-semibold text-gray-800 dark:text-gray-200">AWS Modules Chat</h1>
      </div>

      <div className="flex-grow overflow-auto p-4">
        <react_chat_elements_1.MessageList className="message-list" lockable={true} toBottomHeight={'100%'} dataSource={messages.map((msg) => ({
            type: 'text',
            position: msg.position,
            title: msg.title,
            text: msg.text,
            date: msg.date.getTime(),
            id: msg.id,
            status: msg.status,
            focus: msg.focus ?? false,
            forwarded: msg.forwarded ?? false,
            replyButton: msg.replyButton ?? false,
            removeButton: msg.removeButton ?? false,
            notch: msg.notch ?? true,
            retracted: msg.retracted ?? false,
            titleColor: msg.titleColor ?? (msg.position === 'left' ? '#4080ff' : '#40a9ff')
        }))} referance={messageListRef}/>
        {error && (<div className="text-red-500 text-sm mt-2 px-4">
            {error}
          </div>)}
      </div>

      <VoiceChat_1.VoiceChat onCheckIn={async (message) => {
            await sendMessage(message);
        }} onAgentResponse={(speak) => setSpeakText(() => speak)}/>

      <div className="p-4 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
        <div className="flex gap-2">
          <div className="flex-grow">
            <input type="text" placeholder="Type your message..." value={inputText} onChange={(e) => setInputText(e.target.value)} onKeyPress={(e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage(inputText);
            }
        }} disabled={isLoading} className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 border-gray-300 dark:border-gray-600"/>
          </div>
          <button onClick={() => sendMessage(inputText)} disabled={isLoading || !inputText.trim()} className={`px-6 py-2 rounded-lg font-medium ${isLoading || !inputText.trim()
            ? 'bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400'
            : 'bg-blue-500 text-white hover:bg-blue-600 dark:hover:bg-blue-700'}`}>
            {isLoading ? 'Sending...' : 'Send'}
          </button>
        </div>
      </div>
    </div>);
};
exports.default = Chat;
//# sourceMappingURL=data:application/json;base64,